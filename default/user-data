#cloud-config
autoinstall:
  # https://cloudinit.readthedocs.io/en/latest/index.html
  # https://cloudinit.readthedocs.io/en/latest/topics/examples.html
  # config version 1.10.2
  #
  refresh-installer:
    update: yes
  # Disabled. All ubuntu specific 'identity:' directives moved to
  # 'user-data:' section
  # identity:
  #
  interactive-sections:
    - network
    - storage
  apt:
    disable_components: []
    geoip: true
    preserve_sources_list: false
    primary:
    - arches:
      - amd64
      - i386
      uri: http://us.archive.ubuntu.com/ubuntu
      search_dns: true
    - arches:
      - default
      uri: http://ports.ubuntu.com/ubuntu-ports
  datasource:
    NoCloud:
      # Default seedfrom is None
      # if found, then it should contain a url with:
      #   <url>/user-data and <url>/meta-data
      # seedfrom: http://my.example.com/i-abcde
      seedfrom: None
      # fs_label: the label on filesystems to be searched for NoCloud source
      fs_label: cidata
      # These are optional, but allow you to basically provide a datasource
      # right here
      user-data: []
      meta-data: []
        #instance-id:
        #local-hostname:
  drivers:
    install: false
  # This not default cloud-init behavior is equivalent to this cloud-config:
  preserve_hostname: true
  prefer_fqdn_over_hostname: false
  manage_etc_hosts: false
  manage_resolv_conf: true
  # Optional. Note for Ubuntu/Debian distros
  # Ubuntu/Debian it is recommended that DNS be configured via the standard
  # /etc/network/interfaces configuration file.
  resolv_conf:
    domain: am.local
    searchdomains:
      - am.local
      - local
  kernel:
    package: linux-generic
  keyboard:
    layout: us
    toggle: null
    variant: ''
  locale: en_US.UTF-8
  timezone: Europe/Kiev
  ssh:
    allow-pw: true
    # Add each entry to ~/.ssh/authorized_keys for the configured user or the
    # first user defined in the user definition directive.
    authorized-keys: []
    install-server: true
  swap:
    filename: swap.img
    size: "auto"
    maxsize: 2G
  updates: security
  package_update: true
  package_upgrade: true
  package_reboot_if_required: true
  packages:
    - git
    - jq
    - less
    - nano
    - netcat
    - open-vm-tools
    - zsh
  late-commands:
    # 'apt' section
    - curtin in-target --target=/target -- apt update
    - curtin in-target --target=/target -- apt upgrade --yes
    # Optional. All packages installation command moved to 'packages:' directive
    # - curtin in-target --target=/target -- apt install [package_name] --yes --no-install-recommends
    - curtin in-target --target=/target -- apt --purge -y --quiet=2 autoremove
    - curtin in-target --target=/target -- apt clean
    - echo 'Generating a report of installed packages...'
    - curtin in-target --target=/target -- apt list --installed > /target/root/apt-postinstall-report.txt
    - echo '[ Done ]'
    # 'sudoers' section
    - echo 'sudoers file creation for user - ubuntu...'
    - "echo '# sudoers file for default system user - ubuntu' > /target/etc/sudoers.d/00-ubuntu"
    - "sed -i -e '$a #' /target/etc/sudoers.d/00-ubuntu"
    - "sed -i -e '$a # ubuntu - User privilege specification' /target/etc/sudoers.d/00-ubuntu"
    - "sed -i -e '$a # Cmnd (Cmd for 1.9+) alias specification (disable - sudo su - command)' -e '$a Cmd_Alias NO_SU = /usr/bin/su' /target/etc/sudoers.d/00-ubuntu"
    - "sed -i -e '$a Cmd_Alias NO_ROOTPW = /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd *root*' /target/etc/sudoers.d/00-ubuntu"
    - "sed -i -e '$a # ubuntu - User privilege specification' /target/etc/sudoers.d/00-ubuntu"
    - "sed -i -e '$a ubuntu ALL=(ALL:ALL) NOPASSWD:ALL, !NO_SU, NO_ROOTPW' /target/etc/sudoers.d/00-ubuntu"
    - echo '[ Done ]'
    # 'sshd' section
    - 'sed -i.~ -e "s|^#PermitRootLogin.*|PermitRootLogin no|" -e "s/^#PermitEmptyPasswords.*/PermitEmptyPasswords no/" /target/etc/ssh/sshd_config'
    - 'sed -i -e "s/^#PubkeyAuthentication.*/PubkeyAuthentication yes/" /target/etc/ssh/sshd_config'
    - echo '[ Autoinstall completed! ]'
  user-data:
    hostname: ULS2204
    fqdn: ULS2204.am.local
    users:
      - name: ubuntu
        gecos: Ubuntu Default User
        passwd: $6$0Q6/zQnGejA9wM6f$urBHcwCQLQKpq4q4aDGFk.GJ7w/wU4kUZk550xmQYcoGFxdZqgNM4uU/4EbLWzLnzGayU4nv4CWva.0BmeX/a/
        lock_passwd: false
        ssh_authorized_keys:
          - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHMvB4PA2OLbyiASIsHS6voFPH0It32Zq1FfSi5K7MkS ubuntu@local
        create_groups: true
        shell: /bin/bash
        groups: adm, cdrom, sudo, dip, plugdev, lxd
    ca_certs:
      remove_defaults: false
    # Write out content to configuration files
    write_files:
      - path: /etc/sudoers.d/01-local
        encoding: text/plain
        owner: root:root
        permissions: '0644'
        content: |
          # Members of the root group may gain root privileges
          # group 'root', gid 0
          %root ALL=(ALL:ALL) NOPASSWD:ALL
        defer: true
      - path: /root/hosts_file_update.sh
        encoding: text/plain
        owner: root:root
        permissions: '0744'
        content: |
          #!/bin/bash
          # Creating /etc/hosts file

          fqdn_string=${HOSTNAME}.local
          timestamp=$(date +%H%M.%F@%T%Z)

          cat > /etc/hosts <<EOF
          # File created with autoinstall. Timestamp: ${timestamp}
          127.0.0.1 localhost
          127.0.1.1 ${fqdn_string} ${HOSTNAME}

          # The following lines are desirable for IPv6 capable hosts
          ::1 localhost ip6-localhost ip6-loopback
          fe00::0 ip6-localnet
          ff00::0 ip6-mcastprefix
          ff02::1 ip6-allnodes
          ff02::2 ip6-allrouters
          EOF

          exit 0
        defer: true
      - path: /home/ubuntu/.nanorc
        encoding: text/plain
        owner: ubuntu:ubuntu
        permissions: '0644'
        content: |
          ## Simple custom initialization file for GNU nano.
          #
          # Back up files to the current filename plus a tilde.
          set backup
          # Remember the used search/replace strings for the next session.
          set historylog
          # Display line numbers to the left of the text.
          set linenumbers
          # Enable soft line wrapping (AKA full-line display).
          unset softwrap
          # Allow nano to be suspended.
          set suspend
          # Use this tab size instead of the default; it must be greater than 0.
          set tabsize 4
          # Convert typed tabs to spaces.
          set tabstospaces
          # To include all existing syntax definitions, you can do:
          include "/usr/share/nano/*.nanorc"
          set locking
        defer: true
    # Run post-install commands
    # default: none
    # runcmd contains a list of either lists or a string
    # each item will be executed in order at rc.local like level with
    # output to the console
    #
    #
    runcmd:
      # Update /etc/hosts
      - [ cp, /etc/hosts, /etc/hosts~ ]
      - [ /usr/bin/env, --, /root/hosts_file_update.sh ]
      - [ rm, /root/hosts_file_update.sh]
      # Disabling cloud-init on the first boot
      #  - [ touch, /etc/cloud/cloud-init.disabled ]
    # The message to display at the end of the run
    final_message: |
      cloud-init has finished
      version: $version
  version: 1
